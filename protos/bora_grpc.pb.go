// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protos/bora.proto

package bora

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BoraService_GetValue_FullMethodName    = "/bora.BoraService/GetValue"
	BoraService_GetDocument_FullMethodName = "/bora.BoraService/GetDocument"
)

// BoraServiceClient is the client API for BoraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoraServiceClient interface {
	GetValue(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ValueResponse, error)
	GetDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error)
}

type boraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoraServiceClient(cc grpc.ClientConnInterface) BoraServiceClient {
	return &boraServiceClient{cc}
}

func (c *boraServiceClient) GetValue(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*ValueResponse, error) {
	out := new(ValueResponse)
	err := c.cc.Invoke(ctx, BoraService_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boraServiceClient) GetDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error) {
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, BoraService_GetDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoraServiceServer is the server API for BoraService service.
// All implementations must embed UnimplementedBoraServiceServer
// for forward compatibility
type BoraServiceServer interface {
	GetValue(context.Context, *KeyRequest) (*ValueResponse, error)
	GetDocument(context.Context, *DocumentRequest) (*DocumentResponse, error)
	mustEmbedUnimplementedBoraServiceServer()
}

// UnimplementedBoraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoraServiceServer struct {
}

func (UnimplementedBoraServiceServer) GetValue(context.Context, *KeyRequest) (*ValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedBoraServiceServer) GetDocument(context.Context, *DocumentRequest) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedBoraServiceServer) mustEmbedUnimplementedBoraServiceServer() {}

// UnsafeBoraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoraServiceServer will
// result in compilation errors.
type UnsafeBoraServiceServer interface {
	mustEmbedUnimplementedBoraServiceServer()
}

func RegisterBoraServiceServer(s grpc.ServiceRegistrar, srv BoraServiceServer) {
	s.RegisterService(&BoraService_ServiceDesc, srv)
}

func _BoraService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoraServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoraService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoraServiceServer).GetValue(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoraService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoraServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoraService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoraServiceServer).GetDocument(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoraService_ServiceDesc is the grpc.ServiceDesc for BoraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bora.BoraService",
	HandlerType: (*BoraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _BoraService_GetValue_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _BoraService_GetDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/bora.proto",
}
